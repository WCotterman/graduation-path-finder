@model GPF.Web.ViewModels.AccountViewModel

@{
    ViewBag.Title = "Edit Account";
}

<div class="page-header">
    <h2>@Model.Account.FirstName @Model.Account.LastName, @Model.Account.Role.Description</h2>
</div>

<nav class="navbar navbar-default">
    <div class="container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-account" aria-expanded="false" aria-controls="navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            @Html.ActionLink("Account", "Edit", "Account", new { area = "" }, new { @class = "navbar-brand" })
        </div>
        <div id="navbar-account" class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
                <li>@Html.ActionLink("Edit", "Edit", "Account")</li>
                <li>@Html.ActionLink("Class History", "ClassHistory", "Account")</li>
                <li>@Html.ActionLink("GPF History", "GPFHistory", "Account")</li>
                @if (Model.Account.Role.Value == "F".ToString() || Model.Account.Role.Value == "A".ToString())
                {
                    <li>@Html.ActionLink("Students", "Students", "Account")</li>
                }
                @if (Model.Account.Role.Value == "A".ToString())
                {
                    <li>@Html.ActionLink("Data View", "DataView", "Account")</li>
                }
            </ul>
        </div><!--/.nav-collapse -->
    </div><!--/.container-fluid -->
</nav>

@using (Html.BeginForm())
{
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Edit @Model.Account.Role.Description Account</h3>
        </div>
        <div class="panel-body">

            @if (Model.Impersonating)
            {
                <div class="alert alert-danger" role="alert">
                    <p>
                        Impersonating Account @GPF.Web.Lib.Statics.ImpersonateGet(Session).Id
                        @Html.ActionLink("Stop Impersonation", "ImpersonateStop", "Account")
                    </p>
                </div>
            }
            @Html.HiddenFor(model => model.Account.Id)

            <div class="form-group">
                <div><strong>ID:</strong> @Model.Account.Id</div>
                <div><strong>Username:</strong> @Model.Account.Username</div>
            </div>

            <div class="form-group">
                <label>First Name</label>
                @Html.EditorFor(model => model.Account.FirstName, new { htmlAttributes = new { @class = "form-control", @placeholder = "First Name" } })
            </div>
            <div class="form-group">
                <label>Last Name</label>
                @Html.EditorFor(model => model.Account.LastName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Last Name" } })
            </div>

            <div class="form-group">
                <label>Degree</label>
                @Html.DropDownListFor(model => model.Account.Degree.Id, new SelectList(Model.AvailableDegrees, "Id", "Title", Model.Account.Degree.Id), new { @id = "select-degree", @class = "form-control", @onchange = "DegreeSelected()" })
            </div>

            <div class="form-group">
                <label>Concentration</label>
                @Html.DropDownListFor(model => model.Account.Concentration.Id, new SelectList(Model.AvailableDegrees.Find(x => x.Id == Model.Account.Degree.Id).Concentrations, "Id", "Title", Model.Account.Concentration.Id), new { @id = "select-concentration", @class = "form-control", @onchange = "ConcentrationSelected()" })
            </div>

            <div class="well">
                <div class="form-group">
                    <label>Street</label>
                    @Html.EditorFor(model => model.Account.Street, new { htmlAttributes = new { @class = "form-control", @placeholder = "Street" } })
                </div>
                <div class="form-group">
                    <label>City</label>
                    @Html.EditorFor(model => model.Account.City, new { htmlAttributes = new { @class = "form-control", @placeholder = "City" } })
                </div>
                <div class="form-group">
                    <label>State</label>
                    @Html.EditorFor(model => model.Account.State, new { htmlAttributes = new { @class = "form-control", @placeholder = "State" } })
                </div>
                <div class="form-group">
                    <label>Zip</label>
                    @Html.EditorFor(model => model.Account.Zip, new { htmlAttributes = new { @class = "form-control", @placeholder = "Zip" } })
                </div>
            </div>

            <input type="submit" value="Save" class="btn btn-default" />
            @Html.ActionLink("Delete Account", "Delete", "Account", new { area = "" }, new { @class = "pull-right" })
        </div>
    </div>
}

<script>
    function DegreeSelected() {
        var degreeId = $('#select-degree').val();
        $("#selected-degree-id").val(degreeId);
        $.ajax({
            url: '/Account/FillConcentrationList',
            type: "GET",
            dataType: "JSON",
            cache: false,
            data: { id: degreeId },
            success: function (concentrations) {
                $("#select-concentration").html("");
                $.each(concentrations, function (i, concentration) {
                    $("#select-concentration").append(
                        $('<option></option>').val(concentration.Id).html(concentration.Title));
                });
            }
        });
    }
</script>