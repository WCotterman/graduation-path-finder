<nav class="navbar navbar-inverse navbar-fixed-top">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>
        @Html.ActionLink("DePaul University", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
    </div>
    <div id="navbar" class="navbar-collapse collapse">
        <ul class="nav navbar-nav">
            <li>@Html.ActionLink("GPF", "Options", "GPF")</li>
            <li>@Html.ActionLink("Search Degrees/Classes", "Degrees", "Catalog")</li>
            @if (GPF.Web.Lib.Statics.HasAuthCookie(Request))
            {
                <li>@Html.ActionLink("Profile", "Edit", "Account")</li>
                <li>@Html.ActionLink("Logout", "Logout", "Account")</li>
            }
            else
            {
                <li>@Html.ActionLink("Login", "Login", "Account")</li>
                <li>@Html.ActionLink("Register", "Register", "Account")</li>
            }
        </ul>
    </div>
</nav>

@{
    var impersonateAccount = GPF.Web.Lib.Statics.ImpersonateGet(Session);
}

@if (impersonateAccount != null)
{
    <div class="alert alert-warning" role="alert">
        <strong>
            Impersonating Student Account:
            @(impersonateAccount.Id.ToString()) -
            @(impersonateAccount.LastName.ToString()),
            @(impersonateAccount.FirstName.ToString())
        </strong>
        <p>
            Updates/actions will reflect on account @(impersonateAccount.Id.ToString()).
        </p>
        @Html.ActionLink("Stop Impersonation", "ImpersonateStop", "Account")
    </div>
}
